import reflex as rx
from typing import TypedDict
import asyncio


class Message(TypedDict):
    text: str
    is_user: bool


class ChatState(rx.State):
    """Manages the chat messages and interaction with the LLM."""

    messages: list[Message] = []
    is_typing: bool = False

    @rx.event
    def clear_chat(self):
        """Clears the chat history."""
        self.messages = []
        self.is_typing = False

    @rx.event
    def send_message(self, form_data: dict):
        """Handles sending a user message and triggering the LLM response."""
        message_text = form_data["message"].strip()
        if not message_text or self.is_typing:
            return
        self.messages.append({"text": message_text, "is_user": True})
        self.is_typing = True
        self.messages.append({"text": "", "is_user": False})
        return ChatState.stream_llm_response

    @rx.event(background=True)
    async def stream_llm_response(self):
        """Streams the LLM response to the UI."""
        await asyncio.sleep(0.5)
        response_text = "This is a streamed response from a mock language model. In a real application, this would be generated by an AI. The text appears word by word to simulate a real-time chat experience."
        current_text = ""
        for word in response_text.split():
            if not self.is_typing:
                break
            current_text += word + " "
            async with self:
                if self.messages:
                    self.messages[-1]["text"] = current_text.strip()
            await asyncio.sleep(0.05)
        async with self:
            self.is_typing = False